'use client';

import { AlgorithmHeader } from '@/components/layout/AlgorithmHeader';
import { CodeImplementation } from '@/components/layout/CodeImplementation';
import { Header } from '@/components/layout/Header';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { motion } from 'framer-motion';
import { pythonImplementations } from './python-implementation';
import { javascriptImplementations } from './js-implementation';
import CountingSortPlayground from '@/components/playground/counting-sort/CountingSortPlayground';

export default function CountingSortPage() {
  return (
    <div className="min-h-screen bg-background">
      <Header isAlgorithmPage />
      <main className="container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto space-y-8">
          <AlgorithmHeader
            title="Counting Sort"
            description="Um algoritmo de ordena√ß√£o n√£o comparativo que utiliza contagem de ocorr√™ncias para ordenar elementos."
            temporalComplexity="O(n + k)"
            spatialComplexity="O(k)"
            difficulty="Intermedi√°rio"
          />

          {/* Explanation Section */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
          >
            <Card className="gap-4">
              <CardHeader>
                <CardTitle className="text-2xl">
                  O que √© o Counting Sort?
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4 text-sm leading-relaxed">
                <p>
                  O Counting Sort √© um algoritmo de ordena√ß√£o n√£o comparativo
                  que funciona contando o n√∫mero de ocorr√™ncias de cada elemento
                  √∫nico e usando essa informa√ß√£o para colocar os elementos nas
                  posi√ß√µes corretas. √â extremamente eficiente quando o range de
                  valores √© pequeno em rela√ß√£o ao n√∫mero de elementos.
                </p>

                <div className="grid md:grid-cols-2 gap-6 my-6">
                  <div className="space-y-3">
                    <h4 className="font-semibold text-base">
                      ‚ö° Como funciona:
                    </h4>
                    <ul className="space-y-2 text-sm">
                      <li>
                        ‚Ä¢ <strong>Fase 1 - Contagem:</strong> Conta as
                        ocorr√™ncias de cada valor
                      </li>
                      <li>
                        ‚Ä¢ <strong>Fase 2 - Acumula√ß√£o:</strong> Transforma
                        contagens em posi√ß√µes
                      </li>
                      <li>
                        ‚Ä¢ <strong>Fase 3 - Posicionamento:</strong> Coloca
                        elementos nas posi√ß√µes corretas
                      </li>
                      <li>
                        ‚Ä¢ <strong>Resultado:</strong> Array ordenado
                        estabilidade preservada
                      </li>
                    </ul>
                  </div>

                  <div className="space-y-3">
                    <h4 className="font-semibold text-base">
                      üéØ Caracter√≠sticas:
                    </h4>
                    <ul className="space-y-2 text-sm">
                      <li>
                        ‚Ä¢ <strong>N√£o-comparativo:</strong> N√£o compara
                        elementos entre si
                      </li>
                      <li>
                        ‚Ä¢ <strong>Est√°vel:</strong> Mant√©m ordem relativa de
                        elementos iguais
                      </li>
                      <li>
                        ‚Ä¢ <strong>Linear:</strong> O(n + k) onde k √© o range de
                        valores
                      </li>
                      <li>
                        ‚Ä¢ <strong>Espa√ßo extra:</strong> Requer O(k) de mem√≥ria
                        adicional
                      </li>
                    </ul>
                  </div>
                </div>

                <div className="bg-green-50 dark:bg-green-950/30 p-4 rounded-lg border border-green-200 dark:border-green-800">
                  <h4 className="font-semibold text-green-900 dark:text-green-100 mb-2">
                    üí° Quando usar:
                  </h4>
                  <ul className="text-green-800 dark:text-green-200 text-sm space-y-1">
                    <li>
                      <strong>‚Ä¢ Range pequeno:</strong> Quando o range de
                      valores √© conhecido e limitado
                    </li>
                    <li>
                      <strong>‚Ä¢ Muitas duplicatas:</strong> Excelente para dados
                      com valores repetidos
                    </li>
                    <li>
                      <strong>‚Ä¢ Performance cr√≠tica:</strong> Quando O(n + k) √©
                      melhor que O(n log n)
                    </li>
                    <li>
                      <strong>‚Ä¢ Inteiros:</strong> Ideal para ordenar n√∫meros
                      inteiros
                    </li>
                  </ul>
                </div>

                <div className="bg-amber-50 dark:bg-amber-950/30 p-4 rounded-lg border border-amber-200 dark:border-amber-800">
                  <h4 className="font-semibold text-amber-900 dark:text-amber-100 mb-2">
                    ‚ö†Ô∏è Limita√ß√µes:
                  </h4>
                  <ul className="text-amber-800 dark:text-amber-200 text-sm space-y-1">
                    <li>
                      <strong>‚Ä¢ Mem√≥ria:</strong> Ineficiente se o range k for
                      muito grande
                    </li>
                    <li>
                      <strong>‚Ä¢ Tipo de dados:</strong> Funciona apenas com
                      inteiros ou dados mape√°veis
                    </li>
                    <li>
                      <strong>‚Ä¢ Valores esparsos:</strong> Desperdi√ßa mem√≥ria
                      com ranges muito espa√ßados
                    </li>
                  </ul>
                </div>
              </CardContent>
            </Card>
          </motion.div>

          {/* Interactive Playground */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.4 }}
          >
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <span className="text-2xl">üéÆ</span>
                  Playground Interativo
                </CardTitle>
                <p className="text-muted-foreground">
                  Experimente o Counting Sort em tempo real. Veja como o
                  algoritmo conta ocorr√™ncias, acumula contagens e posiciona
                  elementos no array ordenado usando visualiza√ß√£o de mem√≥ria.
                </p>
              </CardHeader>
              <CardContent>
                <CountingSortPlayground />
              </CardContent>
            </Card>
          </motion.div>

          {/* Implementation Section */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.8 }}
          >
            <CodeImplementation
              codes={[...javascriptImplementations, ...pythonImplementations]}
              extraComponent={<CountingSortComparison />}
            />
          </motion.div>
        </div>
      </main>
    </div>
  );
}

function CountingSortComparison() {
  return (
    <div className="grid md:grid-cols-2 gap-4">
      <div className="bg-green-50 dark:bg-green-950/30 p-4 rounded-lg border border-green-200 dark:border-green-800">
        <h5 className="font-semibold text-green-900 dark:text-green-100 mb-2">
          ‚úÖ Counting Sort vs Outros Algoritmos
        </h5>
        <ul className="text-green-800 dark:text-green-200 text-sm space-y-1">
          <li>
            ‚Ä¢ <strong>vs Quick Sort:</strong> Mais r√°pido com range pequeno,
            O(n+k) vs O(n log n)
          </li>
          <li>
            ‚Ä¢ <strong>vs Merge Sort:</strong> Usa mais mem√≥ria, mas pode ser
            mais r√°pido
          </li>
          <li>
            ‚Ä¢ <strong>vs Radix Sort:</strong> Radix usa Counting Sort
            internamente
          </li>
          <li>
            ‚Ä¢ <strong>vs Bucket Sort:</strong> Similar, mas Bucket √© mais
            vers√°til
          </li>
        </ul>
      </div>

      <div className="bg-blue-50 dark:bg-blue-950/30 p-4 rounded-lg border border-blue-200 dark:border-blue-800">
        <h5 className="font-semibold text-blue-900 dark:text-blue-100 mb-2">
          ‚ö° Complexidade Detalhada
        </h5>
        <ul className="text-blue-800 dark:text-blue-200 text-sm space-y-1">
          <li>
            ‚Ä¢ <strong>Tempo:</strong> O(n + k) em todos os casos
          </li>
          <li>
            ‚Ä¢ <strong>Espa√ßo:</strong> O(n + k) para arrays auxiliares
          </li>
          <li>
            ‚Ä¢ <strong>n:</strong> N√∫mero de elementos no array
          </li>
          <li>
            ‚Ä¢ <strong>k:</strong> Range de valores (max - min + 1)
          </li>
        </ul>
      </div>
    </div>
  );
}
